/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servergui;

import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.net.Inet4Address;

/**
 *
 * @author Saad Afzaal
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    
    private ObjectOutputStream output;
    private ObjectInputStream input;
    private String serverIP;
    private int serverPort;
    private Socket connection;
    private String message = "";
    private String Username;
    private String Receivername;
    private String UserNo;
    private String ReceiverNo;
    
    public Client(String username , String receivername , String userNo , String receiverNo) {
        initComponents();
        
        Username = username;
        Receivername = receivername;
        UserNo = userNo;
        ReceiverNo = receiverNo;
        
        AddressTxtBox.setText("localhost");
        
        AddressTxtBox.setEditable(false);
        PortTxtBox.setEditable(false);
                
        setTitle(Receivername);
        
        get_chatting();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatWindow = new javax.swing.JTextArea();
        Close_Button = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        AddressTxtBox = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        PortTxtBox = new javax.swing.JTextField();
        Connect_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Client_Area");

        userText.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        userText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTextActionPerformed(evt);
            }
        });

        chatWindow.setEditable(false);
        chatWindow.setColumns(20);
        chatWindow.setFont(new java.awt.Font("Monospaced", 1, 15)); // NOI18N
        chatWindow.setRows(5);
        jScrollPane1.setViewportView(chatWindow);

        Close_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Close_Button.setText("X");
        Close_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Close_ButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("IPAddress :");

        jLabel2.setText("Port :");

        Connect_Button.setText("Connect");
        Connect_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Connect_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(userText)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddressTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PortTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Connect_Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(Close_Button))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Close_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(AddressTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(PortTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Connect_Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userText, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTextActionPerformed
        // TODO add your handling code here:
        
        sendMessage(evt.getActionCommand());
        userText.setText("");
        
        DateFormat dateFormat = new SimpleDateFormat("E h:mm a");
        Date date = new Date();
                
        showMessage("\n" + dateFormat.format(date) + "\n");
    }//GEN-LAST:event_userTextActionPerformed

    private void Close_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Close_ButtonActionPerformed
        // TODO add your handling code here:

        dispose();

        //Chat c = new Chat(Username);
        //c.setVisible(true);
        //c.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        
        closeCrape();        
        
        //this.Close_ButtonActionPerformed(evt);
        //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));

        //System.exit(0);
        //WindowEvent winClosingEvent = new WindowEvent(this , WindowEvent.WINDOW_CLOSING);
        //Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
        //this.setVisible(false);
    }//GEN-LAST:event_Close_ButtonActionPerformed

    private void Connect_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Connect_ButtonActionPerformed
        // TODO add your handling code here:
        
        Thread serverThread = new Thread(new Runnable()
        {
           public void run()
           {
               try
               {
                    String url = "jdbc:derby://localhost:1527/MyDataBase";
                    String uName = "Saad";
                    String uPass= "03214061595";

                    Connection con = DriverManager.getConnection(url , uName , uPass);
                    
                    String sql4 = "SELECT * FROM CONTACTS where PHONENO = '" + ReceiverNo + "' AND USER_PHONENO = '" + UserNo + "'";
                    Statement stat4 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                    ResultSet rs4 = stat4.executeQuery(sql4);
                            
                    rs4.absolute(1);
                    int Port = rs4.getInt("PORT");
                    String Host = rs4.getString("IPADDRESS");
                
                    stat4.close();
                    rs4.close();
                    
                    AddressTxtBox.setText(Host);
                    PortTxtBox.setText(Integer.toString(Port));
                    
                    try
                    {
                        serverIP = Host;
                        serverPort = Port;
                   
                        startRunnig();
                    }
                    catch(Exception ex)
                    {
                        JOptionPane.showMessageDialog(null , Receivername + " is not Online" );
                    }
               }
               catch(SQLException ex)
               {
                   JOptionPane.showMessageDialog(null , ex.getMessage());
               }
           }
        });
             
        serverThread.start();
      
        // wait a bit
        try
        {
            Thread.sleep(1000);
        }
        catch(Exception e)
        {
            
        }  
    }//GEN-LAST:event_Connect_ButtonActionPerformed

    public void get_chatting()
    {
        Thread serverThread = new Thread(new Runnable()
        {
           public void run()
           {
                try
                {
                    String url = "jdbc:derby://localhost:1527/MyDataBase";
                    String uName = "Saad";
                    String uPass= "03214061595";

                    Connection con = DriverManager.getConnection(url , uName , uPass);
            
                    String sql = "SELECT * FROM CHATTING_MESSAGES where (SENDER_RECEIVER_CONTACTNO_1 = '" + UserNo + "' AND SENDER_RECEIVER_CONTACTNO_2 = '" + ReceiverNo + "') OR (SENDER_RECEIVER_CONTACTNO_1 = '" + ReceiverNo + "' AND SENDER_RECEIVER_CONTACTNO_2 = '" + UserNo + "') ORDER BY ID ASC";
                    Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                    ResultSet rs = stat.executeQuery(sql);
                            
                    while(rs.next())
                    {
                        String msg = rs.getString("MESSAGES");
                        Date date = rs.getTimestamp("Date_Time");
                
                        DateFormat dateFormat = new SimpleDateFormat("E h:mm a");
                
                        showMessage("\n" + msg);
                
                        showMessage("\n" + dateFormat.format(date) + "\n");
                    }
            
                    stat.close();
                    rs.close();
                }
                catch (SQLException se)
                {
                    JOptionPane.showMessageDialog(null , se.getMessage());
                }
            }
        });
             
        serverThread.start();
    }
    
    public void startRunnig()
    {
        try
        {
            connectToServer();
            setupStreams();
            whileChatting();
        }
        catch(EOFException eofException)
        {
            showMessage("\n\n" + Username + " terminated connection!");
        }
        catch(IOException ioException)
        {
            ioException.printStackTrace();
        }
        finally
        {
            closeCrape();
        }
    }
    
    private void connectToServer() throws IOException
    {
        showMessage("Attemting connecting...\n");
        connection = new Socket(InetAddress.getByName(serverIP) , serverPort);
        showMessage("Connected to " + connection.getInetAddress().getHostName());
        
        Connect_Button.setEnabled(false);
        PortTxtBox.setEditable(false);
        AddressTxtBox.setEditable(false);
    }
    
    private void setupStreams() throws IOException
    {
        output = new ObjectOutputStream(connection.getOutputStream());
        output.flush();
        input = new ObjectInputStream(connection.getInputStream());
        showMessage("\nDude your stream are now good to go!\n");
    }
    
    private void whileChatting() throws IOException
    {
        ableToType(true);
        
        do
        {
            try
            {
                message = (String) input.readObject();
                showMessage("\n" + message);
                
                DateFormat dateFormat = new SimpleDateFormat("E h:mm a");
                Date date = new Date();
                
                showMessage("\n" + dateFormat.format(date) + "\n");
                
                String msg = message;
                
                try
                {
                    String url = "jdbc:derby://localhost:1527/MyDataBase";
                    String uName = "Saad";
                    String uPass= "03214061595";

                    Connection con = DriverManager.getConnection(url , uName , uPass);
            
                    String sql = "SELECT * FROM COUNTER";
                    Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                    ResultSet rs = stat.executeQuery(sql);
                            
                    rs.absolute(1);
                    String count = rs.getString("MSG_COUNTER");
                
                    stat.close();
                    rs.close();
                    
                    long Count = Long.valueOf(count).longValue();
                
                    Count++;
                    
                    String sql1 = "SELECT * FROM CHATTING_MESSAGES";
                    Statement stat1 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet rs1 = stat1.executeQuery(sql1);
            
                    rs1.moveToInsertRow();
                    rs1.updateLong("ID",Count);
                    rs1.updateString("SENDER_RECEIVER_NAME_1", Username);
                    rs1.updateString("SENDER_RECEIVER_CONTACTNO_1", UserNo);
                    rs1.updateString("Messages", msg);
                    rs1.updateString("SENDER_RECEIVER_NAME_2", Receivername);
                    rs1.updateString("SENDER_RECEIVER_CONTACTNO_2", ReceiverNo);
                    rs1.updateTimestamp("DATE_TIME", new Timestamp(date.getTime()));
                    rs1.insertRow(); 
                
                    stat1.close();
                    rs1.close();
                    
                    String sql2 = "SELECT * FROM COUNTER";
                    Statement stat2 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet rs2 = stat2.executeQuery(sql2);
                    
                    String C = Long.toString(Count);
                    
                    rs2.absolute(1);
                    rs2.updateString("MSG_COUNTER", C);
                    rs2.updateRow(); 
                    
                    stat2.close();
                    rs2.close();
                }
                catch (SQLException se)
                {
                    JOptionPane.showMessageDialog(null , se.getMessage());
                }     
                
                //JOptionPane.showMessageDialog(null , Username + UserNo + msg + Receivername + ReceiverNo);
            }
            catch(ClassNotFoundException classNotFoundException)
            {
                showMessage("\nI don't know that object type!");
            }
        }while(!message.equals(Receivername + " - END"));
    }
    
    private void closeCrape()
    {
        showMessage("\n\nClosing crap down...\n");
        Connect_Button.setEnabled(true);
        PortTxtBox.setEditable(true);
        AddressTxtBox.setEditable(true);
        ableToType(false);
        try
        {
            output.close();
            input.close();
            connection.close();
        }
        catch(IOException ioException)
        {
            ioException.printStackTrace();
        }
    }
    
    private void sendMessage(String message)
    {
        try
        {
            output.writeObject(Username + " - " + message);
            output.flush();
            showMessage("\n" + Username + " - " + message);
        }
        catch(IOException ioException)
        {
            chatWindow.append("\nSomeone messed up sending message hoss!");
        }
    }
    
    private void showMessage(final String text)
    {
        SwingUtilities.invokeLater(
        new Runnable()
        {
            public void run()
            {
                chatWindow.append(text);
            }
        }
        );
    }
    
    private void ableToType(final boolean tof)
    {
        SwingUtilities.invokeLater(
        new Runnable()
        {
            public void run()
            {
                userText.setEditable(tof);
            }
        }
        );
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client("Client" , "My Client" , "###" , "###").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddressTxtBox;
    private javax.swing.JButton Close_Button;
    private javax.swing.JButton Connect_Button;
    private javax.swing.JTextField PortTxtBox;
    private javax.swing.JTextArea chatWindow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField userText;
    // End of variables declaration//GEN-END:variables
}
