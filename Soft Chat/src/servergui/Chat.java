/*8
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servergui;

import java.awt.Color;
import java.awt.GridLayout;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.*;
import java.awt.FlowLayout;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.border.BevelBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.border.MatteBorder;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import info.debatty.java.stringsimilarity.*;

/**
 *
 * @author Amjad Afzaal
 */
public class Chat extends javax.swing.JFrame {

    String Username;
    private GridLayout G;
    private JLabel My_Labels2;
    private String MyType;
    private String MyNo;
    
    /**
     * Creates new form Chat
     * @param username
     */
    public Chat(String username) {
        initComponents();
        
        Chat_Label.setForeground(Color.blue);
        
        Username = username;
        
        FillCombo();
        FillGroupCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        LogOut_Label = new javax.swing.JLabel();
        AddContacts_Label = new javax.swing.JLabel();
        Chat_Label = new javax.swing.JLabel();
        Contacts_Label = new javax.swing.JLabel();
        ScrollPane = new javax.swing.JScrollPane();
        jp = new javax.swing.JPanel();
        ShowAll_Button = new javax.swing.JButton();
        Display_Button = new javax.swing.JButton();
        ComboBox = new javax.swing.JComboBox<>();
        DeleteContacts_Label = new javax.swing.JLabel();
        EditContacts_Label = new javax.swing.JLabel();
        NewGroup_Label = new javax.swing.JLabel();
        MyGroups_Label = new javax.swing.JLabel();
        Groups_Label = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("SoftChat");

        LogOut_Label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        LogOut_Label.setText("LogOut");
        LogOut_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogOut_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LogOut_LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LogOut_LabelMouseExited(evt);
            }
        });

        AddContacts_Label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        AddContacts_Label.setText("AddContacts");
        AddContacts_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddContacts_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AddContacts_LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AddContacts_LabelMouseExited(evt);
            }
        });

        Chat_Label.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        Chat_Label.setText("CHAT");
        Chat_Label.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        Chat_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Chat_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Chat_LabelMouseEntered(evt);
            }
        });

        Contacts_Label.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        Contacts_Label.setText("CONTACTS");
        Contacts_Label.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        Contacts_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Contacts_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Contacts_LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Contacts_LabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jpLayout = new javax.swing.GroupLayout(jp);
        jp.setLayout(jpLayout);
        jpLayout.setHorizontalGroup(
            jpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );
        jpLayout.setVerticalGroup(
            jpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        ScrollPane.setViewportView(jp);

        ShowAll_Button.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ShowAll_Button.setText("Show All");
        ShowAll_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAll_ButtonActionPerformed(evt);
            }
        });

        Display_Button.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Display_Button.setText("Display");
        Display_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Display_ButtonActionPerformed(evt);
            }
        });

        ComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Name" }));

        DeleteContacts_Label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DeleteContacts_Label.setText("DeleteContacts");
        DeleteContacts_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteContacts_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DeleteContacts_LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                DeleteContacts_LabelMouseExited(evt);
            }
        });

        EditContacts_Label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        EditContacts_Label.setText("EditContacts");
        EditContacts_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EditContacts_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                EditContacts_LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                EditContacts_LabelMouseExited(evt);
            }
        });

        NewGroup_Label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        NewGroup_Label.setText("NewGroup");
        NewGroup_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NewGroup_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NewGroup_LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NewGroup_LabelMouseExited(evt);
            }
        });

        MyGroups_Label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        MyGroups_Label.setText("MyGroups");
        MyGroups_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MyGroups_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                MyGroups_LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                MyGroups_LabelMouseExited(evt);
            }
        });

        Groups_Label.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Groups_Label.setText("Groups");
        Groups_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Groups_LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Groups_LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Groups_LabelMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(Chat_Label)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(Groups_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(DeleteContacts_Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AddContacts_Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(LogOut_Label)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(MyGroups_Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(NewGroup_Label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EditContacts_Label)
                                .addGap(28, 28, 28))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Contacts_Label)
                        .addGap(44, 44, 44))))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(Display_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ShowAll_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AddContacts_Label)
                            .addComponent(DeleteContacts_Label)
                            .addComponent(LogOut_Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EditContacts_Label)
                            .addComponent(NewGroup_Label)
                            .addComponent(MyGroups_Label)
                            .addComponent(Groups_Label))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Contacts_Label)
                    .addComponent(Chat_Label))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Display_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ShowAll_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String get_No()
    {
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM ACCOUNTS where USERNAME = '" + Username + "'";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            
            rs.first();
            String myno = rs.getString("PHONENO");
            
            stat.close();
            rs.close();
            
            return myno;
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , se.getMessage());
        }
        return null;
    }
    
    private String get_Type(String MyNo)
    {
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM ACCOUNTS where PHONENO = '" + MyNo + "'";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            
            rs.first();
            String type = rs.getString("TYPE");
            
            stat.close();
            rs.close();
            
            return type;
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , se.getMessage());
        }
        return null;
    }
    
    private void FillGroupCombo()
    {
        try
        {
            String ContactNo = Get_No(Username);
            
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM GROUP_MEMBERS where GROUP_MEMBER_CONTACTNO = '" + ContactNo + "' ORDER BY GROUP_NAME";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            
            while (rs.next())
            {
                String name = rs.getString("GROUP_NAME");
                
                ComboBox.addItem(name);
            }
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , se.getMessage());
        }    
    }
    
    private void FillCombo()
    {
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM CONTACTS where USERNAME = '" + Username + "' ORDER BY NAME ASC";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            
            while (rs.next())
            {
                String name = rs.getString("NAME");
                
                ComboBox.addItem(name);
            }
            
            AutoCompleteDecorator.decorate(this.ComboBox);
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , se.getMessage());
        }    
    }
    
    private void AddContacts_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddContacts_LabelMouseClicked
        // TODO add your handling code here:
        
        AddContacts ac = new AddContacts(Username);
        ac.setVisible(true);
        ac.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(false);
    }//GEN-LAST:event_AddContacts_LabelMouseClicked

    private void AddContacts_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddContacts_LabelMouseEntered
        // TODO add your handling code here:
        
        AddContacts_Label.setBackground(Color.blue);
        AddContacts_Label.setForeground(Color.blue);
    }//GEN-LAST:event_AddContacts_LabelMouseEntered

    private void AddContacts_LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddContacts_LabelMouseExited
        // TODO add your handling code here:
        
        AddContacts_Label.setBackground(Color.gray);
        AddContacts_Label.setForeground(Color.black);
    }//GEN-LAST:event_AddContacts_LabelMouseExited

    private void LogOut_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogOut_LabelMouseClicked
        // TODO add your handling code here:
        
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM SESSION where USERNAME = '" + Username + "'";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = stat.executeQuery(sql);
            
            rs.first();
            rs.updateBoolean("SESSION_ID", false);
            rs.updateRow();
            
            /*String sql1 = "SELECT * FROM LOGGINCHECK where ISLOGGIN = '" + "Yes" + "'";
            Statement stat1 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs1= stat1.executeQuery(sql1);
            
            rs1.absolute(1);
            rs1.deleteRow();
            
            stat1.close();
            rs1.close();*/
            
            ChatSoft cs = new ChatSoft();
            cs.setVisible(true);
            cs.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            this.setVisible(false);
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , se.getMessage());
        }         
    }//GEN-LAST:event_LogOut_LabelMouseClicked

    private void LogOut_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogOut_LabelMouseEntered
        // TODO add your handling code here:
        
        LogOut_Label.setBackground(Color.blue);
        LogOut_Label.setForeground(Color.blue);
    }//GEN-LAST:event_LogOut_LabelMouseEntered

    private void LogOut_LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogOut_LabelMouseExited
        // TODO add your handling code here:
        
        LogOut_Label.setBackground(Color.gray);
        LogOut_Label.setForeground(Color.black);
    }//GEN-LAST:event_LogOut_LabelMouseExited

    private void Contacts_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Contacts_LabelMouseClicked
        // TODO add your handling code here:
        
        Contacts c;
        c = new Contacts(Username);
        c.setVisible(true);
        c.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(false);
    }//GEN-LAST:event_Contacts_LabelMouseClicked

    private void Contacts_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Contacts_LabelMouseEntered
        // TODO add your handling code here:
        
        Contacts_Label.setBackground(Color.blue);
        Contacts_Label.setForeground(Color.blue);
    }//GEN-LAST:event_Contacts_LabelMouseEntered

    private void Contacts_LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Contacts_LabelMouseExited
        // TODO add your handling code here:
        
        Contacts_Label.setBackground(Color.gray);
        Contacts_Label.setForeground(Color.black);
    }//GEN-LAST:event_Contacts_LabelMouseExited

    private void Chat_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Chat_LabelMouseEntered
        // TODO add your handling code here:
        
        Chat_Label.setForeground(Color.BLUE);
    }//GEN-LAST:event_Chat_LabelMouseEntered

    private void ShowAll_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAll_ButtonActionPerformed
        // TODO add your handling code here:
        jp.removeAll();
        
        G = new GridLayout(0,1,5,5);
        jp.setLayout(G);
        
        //jp.setBorder(new MatteBorder(5, 5, 5, 5, Color.RED));
        ScrollPane.setBorder(new BevelBorder(BevelBorder.RAISED));
        
        Border border = BorderFactory.createLineBorder(Color.BLUE, 4);
        
        Border paddingBorder = BorderFactory.createEmptyBorder(10,10,10,10);
        
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM CONTACTS where USERNAME = '" + Username + "'";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            int count = 0;
            
            List<String> Namelist = new ArrayList<String>();
            List<String> Phonenolist = new ArrayList<String>();
            List<String> My_Stringslist = new ArrayList<String>();
            
            while (rs.next())
            {
                String name = rs.getString("NAME");
                String phoneno = rs.getString("PHONENO");
                
                Namelist.add(name);
                Phonenolist.add(phoneno);
                
                count++;
                String C = Integer.toString(count);
                
                String format = "%-30s%s";
                
                String text = String.format(format , name , phoneno);
                
                String My_Strings = " " + C + "        " + text;
                
                My_Stringslist.add(My_Strings);
            }
            
            JLabel My_Labels[] = new JLabel[My_Stringslist.size()];
            
            MyNo = get_No();
            MyType = get_Type(MyNo);        
            
            for(int i=0; i<My_Stringslist.size(); i++)
            {   
                My_Labels[i] = new JLabel(My_Stringslist.get(i));
                
                My_Labels[i].setFont(new Font("Serif" , Font.BOLD , 18));
                My_Labels[i].setForeground(Color.BLACK);
                
                My_Labels[i].setBorder(BorderFactory.createCompoundBorder(border,paddingBorder));
               
                JLabel Label = My_Labels[i];
                
                My_Labels[i].addMouseListener(
                new MouseAdapter()
                {  
                    public void mouseEntered(MouseEvent mEvt)
                    {
                        Label.setForeground(Color.blue);
                        Label.setBackground(Color.blue);
                    }
                }
                );
           
                My_Labels[i].addMouseListener(
                new MouseAdapter()
                {
                    public void mouseExited(MouseEvent mEvt)
                    {
                        Label.setBackground(Color.gray);
                        Label.setForeground(Color.black);
                    }
                }
                );
                
                String ReceiverName = Namelist.get(i);
                String ReceiverNo = Phonenolist.get(i);
                
                String OtherType = get_Type(ReceiverNo);
                //JOptionPane.showMessageDialog(null , MyType + "---" + OtherType);
                
                My_Labels[i].addMouseListener(
                new MouseAdapter()
                {
                    public void mouseClicked(MouseEvent mEvt)
                    {
                        //dispose();
                        
                        try
                        {  
                            if(MyType.equals("S") && OtherType.equalsIgnoreCase("C"))
                            {
                                //JOptionPane.showMessageDialog(null , "Enter Port No to Start Chatting...");
                                ServerGUI S = new ServerGUI(Username , ReceiverName , MyNo , ReceiverNo);
                                Thread ST = new Thread(S);
                                ST.start();
                            }
                        
                            if(MyType.equals("C") && OtherType.equalsIgnoreCase("S"))
                            {
                                //JOptionPane.showMessageDialog(null , "Enter Port No and IP_Address to Start Chatting...");
                                ClientGUI C = new ClientGUI(Username , ReceiverName , MyNo , ReceiverNo);
                                Thread CT = new Thread(C);
                                CT.start();
                            }
                        
                            if(MyType.equals("S") && OtherType.equalsIgnoreCase("S"))
                            {
                                try
                                {           
                                    String sql3 = "SELECT * FROM ACCOUNTS where PHONENO = '" + ReceiverNo + "'";
                                    Statement stat3 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                                    ResultSet rs3 = stat3.executeQuery(sql3);
            
                                    rs3.first();
                                    rs3.updateString("TYPE", "C");
                                    rs3.updateRow();
            
                                    stat3.close();
                                    rs3.close();
                                    JOptionPane.showMessageDialog(null , "Please Select Again!");
                                
                                    dispose();
                                    Chat c = new Chat(Username);
                                    c.setVisible(true);
                                    c.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                                }
                                catch (SQLException se)
                                {
                                    JOptionPane.showMessageDialog(null , se.getMessage());
                                }        
                            }
                        
                            if(MyType.equals("C") && OtherType.equalsIgnoreCase("C"))
                            {
                                try
                                {
                                    String sql4 = "SELECT * FROM ACCOUNTS where PHONENO = '" + ReceiverNo + "'";
                                    Statement stat4 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                                    ResultSet rs4 = stat4.executeQuery(sql4);
            
                                    rs4.first();
                                    rs4.updateString("TYPE", "S");
                                    rs4.updateRow();
            
                                    stat4.close();
                                    rs4.close();
                                
                                    JOptionPane.showMessageDialog(null , "Please Select Again!");
                                
                                    dispose();
                                    Chat c = new Chat(Username);
                                    c.setVisible(true);
                                    c.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                                }
                                catch (SQLException se)
                                {
                                    JOptionPane.showMessageDialog(null , se.getMessage());
                                }
                            }     
                        }
                        catch(Exception ex)
                        {
                            JOptionPane.showMessageDialog(null , "Some Error Occurr...");
                        }
                    }
                }
                );
            }
            
            for(int i=0; i<My_Stringslist.size(); i++)
            {
                jp.add(My_Labels[i]);
            }
           
            String ContactNo = Get_No(Username);      
            
            if((ContactNo.equals("")))
            {
                JOptionPane.showMessageDialog(null , "Invalid ContactNo");
            }
            else
            {                   
                try
                {
                    String sql1 = "SELECT * FROM GROUP_MEMBERS where GROUP_MEMBER_CONTACTNO = '" + ContactNo + "'";
                    Statement stat1 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                    ResultSet rs1 = stat1.executeQuery(sql1);
                
                    List<String> My_Stringslist2 = new ArrayList<String>();
                    List<String> My_Title = new ArrayList<String>();
                    List<String> My_Address = new ArrayList<String>();
                    List<String> Group_Name = new ArrayList<String>();
                    List<Integer> My_Port = new ArrayList<Integer>();
                
                    while(rs1.next())
                    {
                        String groupname = rs1.getString("GROUP_NAME");
                    
                        try
                        {  
                            String sql2 = "SELECT * FROM GROUPS where GROUP_NAME = '" + groupname + "'";
                            Statement stat2 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                            ResultSet rs2 = stat2.executeQuery(sql2);
                    
                            rs2.first();
                            String GroupName = rs2.getString("GROUP_NAME");   
                            String GroupSubject = rs2.getString("GROUP_SUBJECT");
                            String Address = rs2.getString("IP_ADDRESS");
                            int Port = rs2.getInt("PORT");
                
                            String Title = GroupName + "  -----  " + GroupSubject;
                        
                            My_Title.add(Title);
                            My_Address.add(Address);
                            My_Port.add(Port);
                            Group_Name.add(GroupName);
                            
                            count++;
                            String C = Integer.toString(count);
                
                            String format = "%-30s%s";
                        
                            String text = String.format(format , GroupName , GroupSubject);
                        
                            String My_Strings = " " + C + "        " + text;
                        
                            My_Stringslist2.add(My_Strings);
                        }
                        catch(SQLException se)
                        {
                            JOptionPane.showMessageDialog(null , se.getMessage());
                        }
                    }
                
                    stat1.close();
                    rs1.close();
                
                    JLabel My_Labels2[] = new JLabel[My_Stringslist2.size()];
                
                    for(int i=0; i<My_Stringslist2.size(); i++)
                    {   
                        My_Labels2[i] = new JLabel(My_Stringslist2.get(i));
                
                        My_Labels2[i].setFont(new Font("Serif" , Font.BOLD , 18));
                        My_Labels2[i].setForeground(Color.BLACK);
                
                        My_Labels2[i].setBorder(BorderFactory.createCompoundBorder(border,paddingBorder));
               
                        JLabel Label = My_Labels2[i];
                
                        My_Labels2[i].addMouseListener(
                        new MouseAdapter()
                        {  
                            public void mouseEntered(MouseEvent mEvt)
                            {
                                Label.setForeground(Color.blue);
                                Label.setBackground(Color.blue);
                            }
                        }
                        );
           
                        My_Labels2[i].addMouseListener(
                        new MouseAdapter()
                        {
                            public void mouseExited(MouseEvent mEvt)
                            {
                                Label.setBackground(Color.gray);
                                Label.setForeground(Color.black);
                            }
                        }
                        );
                        
                        String title = My_Title.get(i);
                        String address = My_Address.get(i);
                        String group_name = Group_Name.get(i);
                        int port = My_Port.get(i);
                        
                        My_Labels2[i].addMouseListener(
                        new MouseAdapter()
                        {
                            public void mouseClicked(MouseEvent mEvt)
                            {
                                ClientGroup cg = new ClientGroup(Username , title , address , port , group_name);
                                cg.setVisible(true);
                                cg.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                            }
                        }
                        );
                    }
                
                    for(int i=0; i<My_Stringslist2.size(); i++)
                    {
                        jp.add(My_Labels2[i]);
                    }
                
                    JLabel j1 = new JLabel("");
                    jp.add(j1);
                }
                catch (SQLException se)
                {
                    JOptionPane.showMessageDialog(null , "No Result Found!" /*se.getMessage()*/);
                }  
            } 
            
            JLabel j1 = new JLabel("");
            jp.add(j1);
            
            jp.revalidate();
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , se.getMessage());
        }
    }//GEN-LAST:event_ShowAll_ButtonActionPerformed

    private String Get_No(String Mname)
    {
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM ACCOUNTS where USERNAME = '" + Username + "'";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            rs.first();
            String M_No = rs.getString("PHONENO");
            
            stat.close();
            rs.close();
            
            return M_No;
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , se.getMessage());
            return null;            
        }
    }
    
    private void Chat_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Chat_LabelMouseClicked
        // TODO add your handling code here:
        
        Chat c = new Chat(Username);
        c.setVisible(true);
        c.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(false);
    }//GEN-LAST:event_Chat_LabelMouseClicked

    private void Display_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Display_ButtonActionPerformed
        // TODO add your handling code here:
        
        String Cname = (String)ComboBox.getSelectedItem();
        
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM CONTACTS where USERNAME = '" + Username + "' AND NAME = '" + Cname +"'";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
                    
            rs.first();
            String phoneno = rs.getString("PHONENO");   
            
            stat.close();
            rs.close();
            
            int count = 1;
            String C = Integer.toString(count);
            
            String My_Strings = " " + C + "        " + Cname + "             " + phoneno;
            
            jp.removeAll();
            
            G = new GridLayout(0,1,5,5);
            jp.setLayout(G);
        
            //jp.setBorder(new MatteBorder(5, 5, 5, 5, Color.RED));
            ScrollPane.setBorder(new BevelBorder(BevelBorder.RAISED));
        
            Border border = BorderFactory.createLineBorder(Color.BLUE, 4);
        
            Border paddingBorder = BorderFactory.createEmptyBorder(10,10,10,10);
            
            My_Labels2 = new JLabel(My_Strings);
                
            My_Labels2.setFont(new Font("Serif" , Font.BOLD , 20));
            My_Labels2.setForeground(Color.BLACK);
                 
            My_Labels2.setBorder(BorderFactory.createCompoundBorder(border,paddingBorder));
            
            My_Labels2.addMouseListener(
            new MouseAdapter()
            {
                public void mouseEntered(MouseEvent mEvt)
                {
                   My_Labels2.setForeground(Color.blue);
                   My_Labels2.setBackground(Color.blue);
                }
            }
            );
           
            My_Labels2.addMouseListener(
            new MouseAdapter()
            {
                public void mouseExited(MouseEvent mEvt)
                {
                   My_Labels2.setBackground(Color.gray);
                   My_Labels2.setForeground(Color.black);
                }
            }
            );
            
            MyNo = get_No();
            
            MyType = get_Type(MyNo);
            
            String OtherType = get_Type(phoneno);
            //JOptionPane.showMessageDialog(null , MyType + "---" + OtherType);
            
            My_Labels2.addMouseListener(
            new MouseAdapter()
            {
                public void mouseClicked(MouseEvent mEvt)
                {
                    try
                    {  
                        if(MyType.equals("S") && OtherType.equalsIgnoreCase("C"))
                        {
                            //JOptionPane.showMessageDialog(null , "Enter Port No to Start Chatting...");
                            ServerGUI S = new ServerGUI(Username , Cname , MyNo , phoneno);
                            Thread ST = new Thread(S);
                            ST.start();
                        }
                        
                        if(MyType.equals("C") && OtherType.equalsIgnoreCase("S"))
                        {
                            //JOptionPane.showMessageDialog(null , "Enter Port No and IP_Address to Start Chatting...");
                            ClientGUI C = new ClientGUI(Username , Cname , MyNo , phoneno);
                            Thread CT = new Thread(C);
                            CT.start();
                        }
                        
                        if(MyType.equals("S") && OtherType.equalsIgnoreCase("S"))
                        {
                            try
                            {           
                                String sql3 = "SELECT * FROM ACCOUNTS where PHONENO = '" + phoneno + "'";
                                Statement stat3 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                                ResultSet rs3 = stat3.executeQuery(sql3);
            
                                rs3.first();
                                rs3.updateString("TYPE", "C");
                                rs3.updateRow();
            
                                stat3.close();
                                rs3.close();
                                JOptionPane.showMessageDialog(null , "Please Select Again!");
                                
                                dispose();
                                Chat c = new Chat(Username);
                                c.setVisible(true);
                                c.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                            }
                            catch (SQLException se)
                            {
                                JOptionPane.showMessageDialog(null , se.getMessage());
                            }        
                        }
                        
                        if(MyType.equals("C") && OtherType.equalsIgnoreCase("C"))
                        {
                            try
                            {
                                String sql4 = "SELECT * FROM ACCOUNTS where PHONENO = '" + phoneno + "'";
                                Statement stat4 = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                                ResultSet rs4 = stat4.executeQuery(sql4);
            
                                rs4.first();
                                rs4.updateString("TYPE", "S");
                                rs4.updateRow();
            
                                stat4.close();
                                rs4.close();
                                
                                JOptionPane.showMessageDialog(null , "Please Select Again!");
                                
                                dispose();
                                Chat c = new Chat(Username);
                                c.setVisible(true);
                                c.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                            }
                            catch (SQLException se)
                            {
                                JOptionPane.showMessageDialog(null , se.getMessage());
                            }
                        }     
                    }
                    catch(Exception ex)
                    {
                        JOptionPane.showMessageDialog(null , "Some Error Occurr...");
                    }
                }
            }
            );
            
            jp.add(My_Labels2);
            
            JLabel j1 = new JLabel("");
            JLabel j2 = new JLabel("");
            jp.add(j1);
            jp.add(j2);
            
            jp.revalidate();
        }
        catch (SQLException se)
        {
            try
            {
                String url = "jdbc:derby://localhost:1527/MyDataBase";
                String uName = "Saad";
                String uPass= "03214061595";

                Connection con = DriverManager.getConnection(url , uName , uPass);
                
                String sql = "SELECT * FROM GROUPS where GROUP_NAME = '" + Cname + "'";
                Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet rs = stat.executeQuery(sql);
                    
                rs.first();
                String GroupName = rs.getString("GROUP_NAME");
                String GroupSubject = rs.getString("GROUP_SUBJECT");
                String Address = rs.getString("IP_ADDRESS");
                int Port = rs.getInt("PORT");
                
                String Title = GroupName + "  -----  " + GroupSubject;
                
                stat.close();
                rs.close();
                
                int count = 1;
                String C = Integer.toString(count);
            
                String My_Strings = " " + C + "        " + GroupName + "             " + GroupSubject;
            
                jp.removeAll();
            
                G = new GridLayout(0,1,5,5);
                jp.setLayout(G);
        
                //jp.setBorder(new MatteBorder(5, 5, 5, 5, Color.RED));
                ScrollPane.setBorder(new BevelBorder(BevelBorder.RAISED));
        
                Border border = BorderFactory.createLineBorder(Color.BLUE, 4);
        
                Border paddingBorder = BorderFactory.createEmptyBorder(10,10,10,10);
            
                My_Labels2 = new JLabel(My_Strings);
                
                My_Labels2.setFont(new Font("Serif" , Font.BOLD , 20));
                My_Labels2.setForeground(Color.BLACK);
                 
                My_Labels2.setBorder(BorderFactory.createCompoundBorder(border,paddingBorder));
            
                My_Labels2.addMouseListener(
                new MouseAdapter()
                {
                    public void mouseEntered(MouseEvent mEvt)
                    {
                        My_Labels2.setForeground(Color.blue);
                        My_Labels2.setBackground(Color.blue);
                    }
                }
                );
           
                My_Labels2.addMouseListener(
                new MouseAdapter()
                {
                    public void mouseExited(MouseEvent mEvt)
                    {
                        My_Labels2.setBackground(Color.gray);
                        My_Labels2.setForeground(Color.black);
                    }
                }
                );
                
                My_Labels2.addMouseListener(
                new MouseAdapter()
                {
                    public void mouseClicked(MouseEvent mEvt)
                    {
                        ClientGroup cg = new ClientGroup(Username , Title , Address , Port , GroupName);
                        cg.setVisible(true);
                        cg.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    }
                }
                );                
                
                jp.add(My_Labels2);
            
                JLabel j1 = new JLabel("");
                JLabel j2 = new JLabel("");
                jp.add(j1);
                jp.add(j2);
                
                jp.revalidate();
            }
            catch(Exception sx)
            {
                JOptionPane.showMessageDialog(null , "No Result Found!" /*se.getMessage()*/);
            }
        }  
    }//GEN-LAST:event_Display_ButtonActionPerformed

    private void DeleteContacts_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteContacts_LabelMouseClicked
        // TODO add your handling code here:
        
        DeleteContacts dc = new DeleteContacts(Username);
        dc.setVisible(true);
        dc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        dc.setSize(455,500);
        this.setVisible(false);
    }//GEN-LAST:event_DeleteContacts_LabelMouseClicked

    private void DeleteContacts_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteContacts_LabelMouseEntered
        // TODO add your handling code here:

        DeleteContacts_Label.setForeground(Color.blue);
    }//GEN-LAST:event_DeleteContacts_LabelMouseEntered

    private void DeleteContacts_LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteContacts_LabelMouseExited
        // TODO add your handling code here:

        DeleteContacts_Label.setBackground(Color.gray);
        DeleteContacts_Label.setForeground(Color.black);
    }//GEN-LAST:event_DeleteContacts_LabelMouseExited

    private void EditContacts_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditContacts_LabelMouseClicked
        // TODO add your handling code here:

        DeleteContacts dc = new DeleteContacts(Username);
        dc.setVisible(true);
        dc.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        dc.setSize(455,500);
        this.setVisible(false);
    }//GEN-LAST:event_EditContacts_LabelMouseClicked

    private void EditContacts_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditContacts_LabelMouseEntered
        // TODO add your handling code here:

        EditContacts_Label.setForeground(Color.blue);
    }//GEN-LAST:event_EditContacts_LabelMouseEntered

    private void EditContacts_LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EditContacts_LabelMouseExited
        // TODO add your handling code here:

        EditContacts_Label.setBackground(Color.gray);
        EditContacts_Label.setForeground(Color.black);
    }//GEN-LAST:event_EditContacts_LabelMouseExited

    private void NewGroup_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewGroup_LabelMouseClicked
        // TODO add your handling code here:
        
        NewGroup ng = new NewGroup(Username);
        ng.setVisible(true);
        ng.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(false);
    }//GEN-LAST:event_NewGroup_LabelMouseClicked

    private void NewGroup_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewGroup_LabelMouseEntered
        // TODO add your handling code here:

        NewGroup_Label.setForeground(Color.blue);
    }//GEN-LAST:event_NewGroup_LabelMouseEntered

    private void NewGroup_LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewGroup_LabelMouseExited
        // TODO add your handling code here:

        NewGroup_Label.setBackground(Color.gray);
        NewGroup_Label.setForeground(Color.black);
    }//GEN-LAST:event_NewGroup_LabelMouseExited

    private void MyGroups_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MyGroups_LabelMouseClicked
        // TODO add your handling code here:
        
        MyGroups mg = new MyGroups(Username);
        mg.setVisible(true);
        mg.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(false);
    }//GEN-LAST:event_MyGroups_LabelMouseClicked

    private void MyGroups_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MyGroups_LabelMouseEntered
        // TODO add your handling code here:

        MyGroups_Label.setForeground(Color.blue);
    }//GEN-LAST:event_MyGroups_LabelMouseEntered

    private void MyGroups_LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MyGroups_LabelMouseExited
        // TODO add your handling code here:

        MyGroups_Label.setBackground(Color.gray);
        MyGroups_Label.setForeground(Color.black);
    }//GEN-LAST:event_MyGroups_LabelMouseExited

    private void Groups_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Groups_LabelMouseClicked
        // TODO add your handling code here:
        
        Groups g = new Groups(Username);
        g.setVisible(true);
        g.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setVisible(false);
    }//GEN-LAST:event_Groups_LabelMouseClicked

    private void Groups_LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Groups_LabelMouseEntered
        // TODO add your handling code here:

        Groups_Label.setForeground(Color.blue);
    }//GEN-LAST:event_Groups_LabelMouseEntered

    private void Groups_LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Groups_LabelMouseExited
        // TODO add your handling code here:

        Groups_Label.setBackground(Color.gray);
        Groups_Label.setForeground(Color.black);
    }//GEN-LAST:event_Groups_LabelMouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        //java.awt.EventQueue.invokeLater(new Runnable() {
          //  public void run() {
            //    new Chat().setVisible(true);
            //}
        //});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AddContacts_Label;
    private javax.swing.JLabel Chat_Label;
    private javax.swing.JComboBox<String> ComboBox;
    private javax.swing.JLabel Contacts_Label;
    private javax.swing.JLabel DeleteContacts_Label;
    private javax.swing.JButton Display_Button;
    private javax.swing.JLabel EditContacts_Label;
    private javax.swing.JLabel Groups_Label;
    private javax.swing.JLabel LogOut_Label;
    private javax.swing.JLabel MyGroups_Label;
    private javax.swing.JLabel NewGroup_Label;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JButton ShowAll_Button;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jp;
    // End of variables declaration//GEN-END:variables
}
