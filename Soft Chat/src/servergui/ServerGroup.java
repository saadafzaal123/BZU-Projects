/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servergui;

import java.io.*;
import java.net.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.*;
import javax.swing.JOptionPane;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Saad Afzaal
 */
public class ServerGroup extends javax.swing.JFrame 
{
    private ArrayList clientOutputStreams;
    private ArrayList<String> users;
    private ServerSocket ServerSock;
    
    /**
     * Creates new form ServerGroup
     */
    public ServerGroup() {
        initComponents();
        
        FillGroupCombo();
        
        setTitle("Server Area");
        
        b_end.setEnabled(false);
        b_clear.setEnabled(false);
        b_users.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ta_chat = new javax.swing.JTextArea();
        b_start = new javax.swing.JButton();
        b_users = new javax.swing.JButton();
        b_end = new javax.swing.JButton();
        b_clear = new javax.swing.JButton();
        Group_ComboBox = new javax.swing.JComboBox<>();
        IPPortTxtBox = new javax.swing.JTextField();
        Change_Button = new javax.swing.JButton();
        Port_CheckBox = new javax.swing.JCheckBox();
        IP_Address_CheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ta_chat.setEditable(false);
        ta_chat.setColumns(20);
        ta_chat.setRows(5);
        jScrollPane1.setViewportView(ta_chat);

        b_start.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        b_start.setText("Start");
        b_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_startActionPerformed(evt);
            }
        });

        b_users.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        b_users.setText("Online Users");
        b_users.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_usersActionPerformed(evt);
            }
        });

        b_end.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        b_end.setText("END");
        b_end.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_endActionPerformed(evt);
            }
        });

        b_clear.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        b_clear.setText("Clear");
        b_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_clearActionPerformed(evt);
            }
        });

        Group_ComboBox.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        Group_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Group" }));

        IPPortTxtBox.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N

        Change_Button.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        Change_Button.setText("Change");
        Change_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Change_ButtonActionPerformed(evt);
            }
        });

        Port_CheckBox.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        Port_CheckBox.setText("Port");
        Port_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Port_CheckBoxActionPerformed(evt);
            }
        });

        IP_Address_CheckBox.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        IP_Address_CheckBox.setText("IP_Address");
        IP_Address_CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IP_Address_CheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(b_end, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_start, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(b_users, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(b_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Group_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Port_CheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(IP_Address_CheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(IPPortTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Change_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Group_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IPPortTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Change_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Port_CheckBox)
                    .addComponent(IP_Address_CheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(b_start, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_users, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_end, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(b_clear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FillGroupCombo()
    {
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM GROUPS ORDER BY GROUP_NAME ASC";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            
            while (rs.next())
            {
                String name = rs.getString("GROUP_NAME");
                
                Group_ComboBox.addItem(name);
            }
            
            AutoCompleteDecorator.decorate(this.Group_ComboBox);
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , se.getMessage());
        }    
    }
    
    private void b_endActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_endActionPerformed
        // TODO add your handling code here:
        
        tellEveryone("\n\nServer:is stopping and all users will be disconnected.\n:Chat");
        ta_chat.append("\n\nServer stopping... \n");
        
        try 
        {
            Thread.sleep(3000);                  //3000 milliseconds is three second.
        } 
        catch(InterruptedException ex) 
        {
            Thread.currentThread().interrupt();
        } 
        
        System.exit(0);
    }//GEN-LAST:event_b_endActionPerformed

    private void b_startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_startActionPerformed
        // TODO add your handling code here:
        
        String GroupName = (String)Group_ComboBox.getSelectedItem();
        
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM GROUPS where GROUP_NAME = '" + GroupName + "'";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            rs.first();
            int Port = rs.getInt("PORT");
   
            stat.close();
            rs.close();
        
            Thread starter = new Thread(new ServerStart(ServerSock , Port));
            starter.start();
        
            ta_chat.append("Server started...\n");
            
            b_end.setEnabled(true);
            b_clear.setEnabled(true);
            b_users.setEnabled(true);
            b_start.setEnabled(false);
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , "Invalid Group Selected!"/*se.getMessage()*/);
        }    
    }//GEN-LAST:event_b_startActionPerformed

    private void b_usersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_usersActionPerformed
        // TODO add your handling code here:
        
        ta_chat.append("\n Online users : \n");
        
        for (String current_user : users)
        {
            ta_chat.append(current_user);
            ta_chat.append("\n");
        }    
    }//GEN-LAST:event_b_usersActionPerformed

    private void b_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_clearActionPerformed
        // TODO add your handling code here:
        
        ta_chat.setText("");
    }//GEN-LAST:event_b_clearActionPerformed

    private void Change_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Change_ButtonActionPerformed
        // TODO add your handling code here:
        
        String GroupName = (String)Group_ComboBox.getSelectedItem();
        
        if(IP_Address_CheckBox.isSelected())
        {
            String IP_Address = IPPortTxtBox.getText();
            
            if(IP_Address.equals(""))
            {
                JOptionPane.showMessageDialog(null , "Please Enter IP_Address!");
            }
            else
            {
                try
                {
                    String url = "jdbc:derby://localhost:1527/MyDataBase";
                    String uName = "Saad";
                    String uPass= "03214061595";

                    Connection con = DriverManager.getConnection(url , uName , uPass);

                    String sql = "SELECT * FROM GROUPS";
                    Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet rs = stat.executeQuery(sql);

                    while(rs.next())
                    {
                        rs.updateString("IP_ADDRESS", IP_Address);
                        rs.updateRow();
                    }
                
                    stat.close();
                    rs.close();
                
                    JOptionPane.showMessageDialog(null , "IP_Address Change Successfully!");
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(null , ex.getMessage());
                }
            }
        }
        
        else if(Port_CheckBox.isSelected())
        {
            try
            {
                String port = IPPortTxtBox.getText();
                int Port = Integer.parseInt(port);
            
                try
                {
                    String url = "jdbc:derby://localhost:1527/MyDataBase";
                    String uName = "Saad";
                    String uPass= "03214061595";

                    Connection con = DriverManager.getConnection(url , uName , uPass);

                    String sql = "SELECT * FROM GROUPS where GROUP_NAME = '" + GroupName + "'";
                    Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
                    ResultSet rs = stat.executeQuery(sql);

                    rs.first();
                    rs.updateInt("PORT", Port);
                    rs.updateRow();
                
                    stat.close();
                    rs.close();
                    
                    JOptionPane.showMessageDialog(null , "Port Change Successfully!");
                }
                catch(SQLException ex)
                {
                    JOptionPane.showMessageDialog(null , "Invalid Group or Port may be in Used!");
                }
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(null , "Port must be Integer!");
            }
        }
        
        else
        {
            JOptionPane.showMessageDialog(null , "Please Select the CheckBox!");
        }
    }//GEN-LAST:event_Change_ButtonActionPerformed

    private void IP_Address_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IP_Address_CheckBoxActionPerformed
        // TODO add your handling code here:
        
        Port_CheckBox.setSelected(false);
        
        String GroupName = (String)Group_ComboBox.getSelectedItem();
        
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM GROUPS where GROUP_NAME = '" + GroupName + "'";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            rs.first();
            String IP_Address = rs.getString("IP_ADDRESS");
   
            stat.close();
            rs.close();
            
            IPPortTxtBox.setText(IP_Address);
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , "Invalid Group Selected!"/*se.getMessage()*/);
            IP_Address_CheckBox.setSelected(false);
        }  
    }//GEN-LAST:event_IP_Address_CheckBoxActionPerformed

    private void Port_CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Port_CheckBoxActionPerformed
        // TODO add your handling code here:
        
        IP_Address_CheckBox.setSelected(false);
        
        String GroupName = (String)Group_ComboBox.getSelectedItem();
        
        try
        {
            String url = "jdbc:derby://localhost:1527/MyDataBase";
            String uName = "Saad";
            String uPass= "03214061595";

            Connection con = DriverManager.getConnection(url , uName , uPass);
            
            String sql = "SELECT * FROM GROUPS where GROUP_NAME = '" + GroupName + "'";
            Statement stat = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = stat.executeQuery(sql);
            
            rs.first();
            int Port = rs.getInt("PORT");
   
            stat.close();
            rs.close();
            
            String port = Integer.toString(Port);
            
            IPPortTxtBox.setText(port);
        }
        catch (SQLException se)
        {
            JOptionPane.showMessageDialog(null , "Invalid Group Selected!"/*se.getMessage()*/);
            Port_CheckBox.setSelected(false);
        }      
    }//GEN-LAST:event_Port_CheckBoxActionPerformed

    public class ServerStart implements Runnable 
    {
        private int Port;
        private ServerSocket ServerSock;
        
        public ServerStart(ServerSocket serverSock , int port)
        {
            Port = port;
            ServerSock = serverSock;
        }
        
        @Override
        public void run() 
        {
            clientOutputStreams = new ArrayList();
            users = new ArrayList();  

            try 
            {
                ServerSock = new ServerSocket(Port);

                while (true) 
                {
	            Socket clientSock = ServerSock.accept();
		    PrintWriter writer = new PrintWriter(clientSock.getOutputStream());
		    clientOutputStreams.add(writer);

		    Thread listener = new Thread(new ClientHandler(clientSock, writer));
		    listener.start();
		    ta_chat.append("Got a connection. \n");
                }
            }
            catch (Exception ex)
            {
                ta_chat.append("Error making a connection. \n");
            }
        }
    }
    
    public void userAdd (String data) 
    {
        String message, add = ": :Connect", done = "Server: :Done", name = data;
        ta_chat.append("Before " + name + " added. \n");
        users.add(name);
        ta_chat.append("After " + name + " added. \n");
        String[] tempList = new String[(users.size())];
        users.toArray(tempList);

        for (String token:tempList) 
        {
            message = (token + add);
            tellEveryone(message);
        }
        tellEveryone(done);
    }
    
    public void userRemove (String data) 
    {
        String message, add = ": :Connect", done = "Server: :Done", name = data;
        users.remove(name);
        String[] tempList = new String[(users.size())];
        users.toArray(tempList);

        for (String token:tempList) 
        {
            message = (token + add);
            tellEveryone(message);
        }
        tellEveryone(done);
    }
    
    public void tellEveryone(String message) 
    {
	Iterator it = clientOutputStreams.iterator();

        while (it.hasNext()) 
        {
            try 
            {
                PrintWriter writer = (PrintWriter) it.next();
		writer.println(message);
		ta_chat.append("Sending: " + message + "\n");
                writer.flush();
                ta_chat.setCaretPosition(ta_chat.getDocument().getLength());
            } 
            catch (Exception ex) 
            {
		ta_chat.append("Error telling everyone. \n");
            }
        }
    }
    
    public class ClientHandler implements Runnable	
    {
       BufferedReader reader;
       Socket sock;
       PrintWriter client;

       public ClientHandler(Socket clientSocket, PrintWriter user) 
       {
            client = user;
            try 
            {
                sock = clientSocket;
                InputStreamReader isReader = new InputStreamReader(sock.getInputStream());
                reader = new BufferedReader(isReader);
            }
            catch (Exception ex) 
            {
                ta_chat.append("Unexpected error... \n");
            }

       }

       @Override
       public void run() 
       {
            String message, connect = "Connect", disconnect = "Disconnect", chat = "Chat" ;
            String[] data;

            try 
            {
                while ((message = reader.readLine()) != null) 
                {   
                    ta_chat.append("Received: " + message + "\n");
                    data = message.split(":");
                    
                    for (String token:data) 
                    {
                        ta_chat.append(token + "\n");
                    }

                    if (data[2].equals(connect)) 
                    {
                        tellEveryone((data[0] + ":" + data[1] + ":" + chat));
                        userAdd(data[0]);
                    } 
                    else if (data[2].equals(disconnect)) 
                    {
                        tellEveryone((data[0] + ":has disconnected." + ":" + chat));
                        userRemove(data[0]);
                    } 
                    else if (data[2].equals(chat)) 
                    {
                        tellEveryone(message);
                    } 
                    else 
                    {
                        ta_chat.append("No Conditions were met. \n");
                    }
                } 
             } 
             catch (Exception ex) 
             {
                ta_chat.append("Lost a connection. \n");
                ex.printStackTrace();
                clientOutputStreams.remove(client);
             } 
	} 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerGroup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerGroup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Change_Button;
    private javax.swing.JComboBox<String> Group_ComboBox;
    private javax.swing.JTextField IPPortTxtBox;
    private javax.swing.JCheckBox IP_Address_CheckBox;
    private javax.swing.JCheckBox Port_CheckBox;
    private javax.swing.JButton b_clear;
    private javax.swing.JButton b_end;
    private javax.swing.JButton b_start;
    private javax.swing.JButton b_users;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea ta_chat;
    // End of variables declaration//GEN-END:variables
}
